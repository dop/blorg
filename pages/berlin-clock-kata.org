#+TITLE: Berlin Clock Kata
#+SUBTITLE: Wix Grow Activity
#+DATE: <2021-08-27 Fri>
#+AUTHOR: Donatas Petrauskas <donatasp@wix.com>
#+HTML_HEAD_EXTRA: <link id="presentation-stylesheet" rel="stylesheet" type="text/css" href="emacs/presentation.css" />
#+HTML_HEAD_EXTRA: <script src="emacs/presentation.js"></script>
#+OPTIONS: toc:nil num:nil

* Berlin Clock

https://en.wikipedia.org/wiki/Mengenlehreuhr

[[https://upload.wikimedia.org/wikipedia/commons/4/4f/Berlin-Uhr-1650-1705.gif]]

* Berlin Clock

#+DOWNLOADED: screenshot @ 2023-09-07 22:04:42
[[file:images/20230907-220442_screenshot.png]]

- Round light blinks to denote odd (on) or even (off) seconds.
- 1st row denotes five full hours each. 2nd row denotes one hour each.
- 3rd row eleven lights, which denote five full minutes each.
- 4th row indicates one full.

* Kata

#+begin_quote
A code kata is an exercise in programming which helps programmers hone their skills through practice and repetition.
#+end_quote

* Theme of the day

Purely functional style.

* Constraints
- Only =const=, no =let=.
- No re-assignment or mutation.
- Recursion for iteration.
- Avoid built-ins.

* No re-assignment

#+begin_src javascript
  array[0] = 1;
  object.x = 2;
#+end_src

* No mutation

Given this
#+begin_src javascript
  const a = [1, 2, 3];
#+end_src

None of this
#+begin_src javascript
  a.push(4);
  a.reverse();
  a.sort()
  a.splice(1, 3);
#+end_src

* Destruct & construct

#+begin_src javascript
  function withFirst(x, array) {
    const [_, ...rest] = array;
    return [x, ...rest];
  }

  function withKey(object, key, value) {
    return { ...object, [key]: value };
  }
#+end_src

* Recursion to iterate

No =for=, =while=, or =.forEach=.

#+begin_src javascript
  a.map(n => n + 1);
  a.filter(n => n % 2);
  a.reduce((acc, n) => acc + n);

  function range(n, m) {
    return new Array(m - n)
      .fill(0)
      .map((_, index) => n + index);
  }
#+end_src

* Bonus: avoid built-ins

#+begin_src javascript
  function range(n, m) {
    return n < m ? [n, ...range(n + 1, m)] : [];
  }

  function tail(xs) {
    const [, ...rest] = xs;
    return rest;
  }

  function reduce(fn, xs, acc) {
    return xs.length > 0
      ? reduce(fn, tail(xs), fn(acc, xs[0]))
      : acc;
  }

  function map(fn, xs) {
    return reduce((acc, x) => [...acc, fn(x)], xs, []);
  }
#+end_src

* OO: constraints :noexport:
- No naked operators.
- Extend built-in objects.
- Take advantage of built-in object functionality.
* OO: no naked operators :noexport:
No.
#+begin_src js
const x = a + 1;
const y = z % 5;
#+end_src
Yes.
#+begin_src js
const x = a.inc();
const y = z.mod(5);
#+end_src
* OO: extend built-ins. :noexport:
#+begin_src js
Number.prototype.mod = function (number) {
  return this % number;
};
Number.prototype.times = function (fn) {
  const r = [];
  for (let i = 0; i < this; i++) {
    r.push(fn(i));
  }
  return r;
};
#+end_src
#+begin_src js
(4).times((i) => i * 2) // => [ 0, 2, 4, 6 ]
#+end_src
* OO: built-in functionality #1 :noexport:
#+begin_src js
class DigitalClock {
  constructor(h, m, s) {
    this.hours = h;
    this.minutes = m;
    this.seconds = s;
  }
}
DigitalClock.prototype.toString = function () {
  return this.hours.asDigitalTime() + ':' +
    this.minutes.asDigitalTime() + ':' +
    this.seconds.asDigitalTime();
}

"Time is " + new DigitalClock(12, 5, 1) // => Time is 12:05:01
#+end_src
* OO: built-in functionality #2 :noexport:
#+begin_src js
class Time extends Number {
  toString() { return super.toString().padStart(2, '0') }
}

class Seconds extends Time {}
class Minutes extends Time {}
class Hours extends Time {}

new Second(10).mod(3) // => 1
[new Hours(12), new Minutes(5), new Seconds(1)].join(':') // => 12:05:01
new Minutes(5) + ':' + new Seconds(1) // => 5:1
#+end_src
* Specification

#+begin_example
            S H×5  H    M×5         M
  00:00:00  . .... .... ........... ....
  00:00:01  X .... .... ........... ....
  22:23:18  . XXXX XX.. XX|X....... XXX.
#+end_example

* Template

#+begin_src javascript
require('readline')
  .createInterface({ input: process.stdin })
  .on('line', line => console.log(line + ' => ' + toBerlinClock(line)));

function toBerlinClock(line) {
  return '. .... .... ........... ....';
}
#+end_src
