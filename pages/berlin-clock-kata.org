#+TITLE: Berlin Clock Kata
#+SUBTITLE: Wix Grow: Weekly Session Vol. 10
#+DATE: <2021-08-27 Fri>
#+AUTHOR: Donatas Petrauskas <donatasp@wix.com>

* Berlin Clock

https://en.wikipedia.org/wiki/Mengenlehreuhr

[[https://upload.wikimedia.org/wikipedia/commons/4/4f/Berlin-Uhr-1650-1705.gif]]

* Kata

#+begin_quote
A code kata is an exercise in programming which helps programmers hone their skills through practice and repetition.
#+end_quote

* Functional: constraints
- Only =const=, no =let=.
- No re-assignment.
- Recursion for iteration.
- No built-ins.
* Functional: destruction & construction
No.
#+begin_src javascript
array[0] = 1;
object.x = 2;
#+end_src
Yes.
#+begin_src javascript
function f(array) {
  const [a, ...rest] = array;
  return [1, ...rest];
}
#+end_src
No.
#+begin_src javascript
[1].concat(array.slice(1))
#+end_src

* Functional: allowed built-ins
#+begin_src javascript
array.map((x) => x + 1);
array.filter(isOdd);
array.reduce((acc, x) => acc + x);
#+end_src
* Functional: recursion example
#+begin_src javascript
function repeat(x, count) {
  return count > 0 ? [x, ...repeat(x, count - 1)] : [];
}

repeat(1, 3) // => [1, 1, 1]
#+end_src
* OO: constraints
- No naked operators.
- Extend built-in objects.
- Take advantage of built-in object functionality.
* OO: no naked operators
No.
#+begin_src js
const x = a + 1;
const y = z % 5;
#+end_src
Yes.
#+begin_src js
const x = a.inc();
const y = z.mod(5);
#+end_src
* OO: extend built-ins.
#+begin_src js
Number.prototype.mod = function (number) {
  return this % number;
};
Number.prototype.times = function (fn) {
  const r = [];
  for (let i = 0; i < this; i++) {
    r.push(fn(i));
  }
  return r;
};
#+end_src
#+begin_src js
(4).times((i) => i * 2) // => [ 0, 2, 4, 6 ]
#+end_src
* OO: built-in functionality #2
#+begin_src js
class DigitalClock {
  constructor(h, m, s) {
    this.hours = h;
    this.minutes = m;
    this.seconds = s;
  }
}
DigitalClock.prototype.toString = function () {
  return this.hours.asDigitalTime() + ':' +
    this.minutes.asDigitalTime() + ':' +
    this.seconds.asDigitalTime();
}

"Time is " + new DigitalClock(12, 5, 1) // => Time is 12:05:01
#+end_src
* OO: built-in functionality #2
#+begin_src js
class Time extends Number {
  toString() { return super.toString().padStart(2, '0') }
}

class Seconds extends Time {}
class Minutes extends Time {}
class Hours extends Time {}

new Second(10).mod(3) // => 1
[new Hours(12), new Minutes(5), new Seconds(1)].join(':') // => 12:05:01
new Minutes(5) + ':' + new Seconds(1) // => 5:1
#+end_src
* Specification

#+begin_example
            S H×5  H    M×5         M
  00:00:00  . .... .... ........... ....
  00:00:01  X .... .... ........... ....
  22:23:18  . XXXX XX.. XX|X....... XXX.
#+end_example

* Template

#+begin_src javascript
require('readline')
  .createInterface({ input: process.stdin })
  .on('line', line => console.log(line + ' => ' + toBerlinClock(line)));

function toBerlinClock(line) {
  return '. .... .... ........... ....';
}
#+end_src
