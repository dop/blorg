#+TITLE: Berlin Clock Kata
#+SUBTITLE: Wix Grow Activity
#+DATE: <2021-08-27 Fri>
#+AUTHOR: Donatas Petrauskas <donatasp@wix.com>
#+OPTIONS: toc:nil num:nil

* Berlin Clock

https://en.wikipedia.org/wiki/Mengenlehreuhr

[[https://upload.wikimedia.org/wikipedia/commons/4/4f/Berlin-Uhr-1650-1705.gif]]

* Berlin Clock (cont.)

#+DOWNLOADED: screenshot @ 2023-09-07 22:04:42
[[file:images/20230907-220442_screenshot.png]]

- Round light blinks to denote odd (on) or even (off) seconds.
- *1st* row denotes five full hours each. *2nd* row denotes one hour each.
- *3rd* row eleven lights, which denote five full minutes each.
- *4th* row indicates one full.

* Kata

#+begin_quote
A code kata is an exercise in programming which helps programmers hone their skills through practice and repetition.
#+end_quote

file:images/karate-girl-karate-kick.gif

* Theme of the day

Purely functional style.

* Constraints
- Only =const=, no =let=.
- No re-assignment or mutation.
- Recursion for iteration.
- Avoid built-ins.

* No re-assignment

#+begin_src javascript
  array[0] = 1;
  object.x = 2;
#+end_src

* No mutation

Given this
#+begin_src javascript
  const a = [1, 2, 3];
#+end_src

None of this
#+begin_src javascript
  a.push(4);
  a.reverse();
  a.sort()
  a.splice(1, 3);
#+end_src

* Destruct & construct

#+begin_src javascript
  function withFirst(x, array) {
    const [_, ...rest] = array;
    return [x, ...rest];
  }

  function withKey(object, key, value) {
    return { ...object, [key]: value };
  }
#+end_src

* Recursion to iterate

No =for=, =while=, or =.forEach=.

#+begin_src javascript
  a.map(n => n + 1);
  a.filter(n => n % 2);
  a.reduce((acc, n) => acc + n);

  function range(n, m) {
    return Array.from({length: m - n})
      .map((_, index) => n + index);
  }
#+end_src

* Bonus: avoid built-ins

Replace =.map=, =.reduce=, =.slice(1)=.

#+begin_src javascript
  function tail(xs) {
    const [, ...rest] = xs;
    return rest;
  }

  function reduce(fn, xs, acc) {
    return xs.length > 0
      ? reduce(fn, tail(xs), fn(acc, xs[0]))
      : acc;
  }

  function map(fn, xs) {
    return reduce((acc, x) => [...acc, fn(x)], xs, []);
  }
#+end_src

Without =Array.from=.

#+begin_src
  function range(n, m) {
    return n < m ? [n, ...range(n + 1, m)] : [];
  }
#+end_src

* Theme of the day 2 :noexport:
Object Oriented style.
* Guidelines :noexport:
- No naked operators.
- Extend built-in objects.
- Use built-in functionality.
- Replace built-in control flow.
* No naked operators :noexport:
No.
#+begin_src js
const x = a + 2;
const y = z % 5;
#+end_src
Yes.
#+begin_src js
const x = a.add(2);
const y = z.mod(5);
#+end_src
* Extend built-ins. :noexport:
#+begin_src js
  Number.prototype.add = function (number) {
    return this + number;
  };
  Number.prototype.times = function (fn) {
    const r = [];
    for (let i = 0; i < this; i++) {
      r.push(fn(i));
    }
    return r;
  };
#+end_src
#+begin_src js
(4).times((i) => i * 2) // => [ 0, 2, 4, 6 ]
#+end_src
* Use built-in functionality :noexport:
#+begin_src js
  class Time {
    constructor(h, m, s) {
      this.hours = h;
      this.minutes = m;
      this.seconds = s;
    }

    toString() {
      return [this.hours, this.minutes, this.seconds]
        .map(number => number.toString().padStart(2, '0'))
        .join(':')
    }
  }

  "Time is " + new Time(12, 5, 1) // => Time is 12:05:01
#+end_src
* Replace built-in control flow: if :noexport:
#+begin_src js
  Number.prototype.lessThan = function (n) {
    return this < n;
  }

  Boolean.prototype.if = function (yes, no) {
    return this.valueOf() ? yes() : no();
  }

  (5).lessThan(4).if(() => 'yay', () => 'ney')
#+end_src

* Replace built-in control flow: for, while :noexport:
#+begin_src js
  // instead of for
  (5).upTo(10, (i) => console.log(i))
  (5).downTo(1, (i) => console.log(i))

  // while ?
#+end_src

* Million bonus points :noexport:
Think about the domain.

- Clock, Lights, Rows of Lights, Hours Rows, Minutes Rows, etc.
- Light can shine with =X= or =|=.
- Clock can receive time, tell seconds, minutes, and hours to corresponding modules.
- Modules can choose which lights to turn on or off.

* Example :noexport:

#+begin_src js
  class MinutesBlock {
    row1 = (11).times((i) => (i).mod(3).eq(2).if(() => new PipeLight(), () => new XLight()))
    row2 = (4).times(i => new XLight())

    setMinutes(minutes) {
      this.row1.forEach(light => light.off())
      this.row2.forEach(light => light.off())
      minutes.div(5).times((i) => this.row1[i].on())
      minutes.mod(5).times((i) => this.row2[i].on())
    }

    toString() {
      return this.row1.join('') + ' ' + this.row2.join('')
    }
  }

  const mb = new MinutesBlock()
  mb.setMinutes(33)
  mb.toString() // => 'XX|XX|..... XXX.'
#+end_src


* Specification

#+begin_example
            S H×5  H    M×5         M
  00:00:00  . .... .... ........... ....
  00:00:01  X .... .... ........... ....
  22:23:18  . XXXX XX.. XX|X....... XXX.
#+end_example

* Template

#+begin_src javascript
  require('readline')
    .createInterface({ input: process.stdin })
    .on('line', line => console.log(`${line} => ${toBerlinClock(line)}`));

  function toBerlinClock(line) {
    return '. .... .... ........... ....';
  }
#+end_src

#+begin_example
  $ echo 10:15:00 | node main.js
  10:15:00 => . XX.. .... XX|........ ....
  $ node main.js < example.txt
  00:00:00 => . .... .... ........... ....
  23:59:59 => X XXXX XXX. XX|XX|XX|XX XXXX
  18:48:02 => . XXX. XXX. XX|XX|XX|.. XXX.
#+end_example
